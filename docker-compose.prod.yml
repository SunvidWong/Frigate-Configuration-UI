version: '3.8'

services:
  # Frigate Configuration UI 主服务
  frigate-config-ui:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    image: frigate-config-ui:latest
    container_name: frigate-config-ui
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=8000
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-https://localhost}
      - VITE_WS_HOST=${VITE_WS_HOST:-localhost}
      - VITE_APP_TITLE=${VITE_APP_TITLE:-Frigate Configuration UI}
      - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0}
      - VITE_ENABLE_MOCK_DATA=false
      - VITE_ENABLE_DEBUG=false
      - VITE_ENABLE_HTTPS=${VITE_ENABLE_HTTPS:-true}
      # 数据库配置
      - DATABASE_URL=postgresql://frigate:${POSTGRES_PASSWORD}@postgres:5432/frigate_config
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
    ports:
      - "127.0.0.1:8000:8000"  # 仅绑定到本地，通过 Nginx 代理
    volumes:
      - ./config:/app/config:rw
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
      - /etc/localtime:/etc/localtime:ro
    networks:
      - frigate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx 反向代理和负载均衡
  nginx:
    image: nginx:1.25-alpine
    container_name: frigate-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
      - nginx-cache:/var/cache/nginx
    networks:
      - frigate-network
    depends_on:
      - frigate-config-ui
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Redis 缓存和会话存储
  redis:
    image: redis:7.2-alpine
    container_name: frigate-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "127.0.0.1:6379:6379"  # 仅本地访问
    volumes:
      - redis-data:/data
      - ./redis.prod.conf:/etc/redis/redis.conf:ro
    networks:
      - frigate-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # PostgreSQL 数据库
  postgres:
    image: postgres:15.4-alpine
    container_name: frigate-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=frigate_config
      - POSTGRES_USER=frigate
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
      # 性能优化配置
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "127.0.0.1:5432:5432"  # 仅本地访问
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgresql.prod.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - frigate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U frigate -d frigate_config"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 可选：监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: frigate-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "127.0.0.1:9090:9090"  # 仅本地访问
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - frigate-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 可选：监控服务 - Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: frigate-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=https://${DOMAIN:-localhost}/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    ports:
      - "127.0.0.1:3000:3000"  # 仅本地访问
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - frigate-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # 可选：日志聚合 - Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: frigate-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - frigate-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # 可选：日志收集 - Promtail
  promtail:
    image: grafana/promtail:2.9.0
    container_name: frigate-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yaml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/frigate:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frigate-network
    depends_on:
      - loki
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

# 网络配置
networks:
  frigate-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: frigate-br0

# 数据卷
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/prometheus
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/grafana
  loki-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/loki
  nginx-cache:
    driver: local