version: '3.8'

services:
  # Frigate Configuration UI 主服务
  frigate-config-ui:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: frigate-config-ui
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=8000
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_WS_HOST=localhost:8000
      - VITE_APP_TITLE=Frigate Configuration UI
      - VITE_APP_VERSION=1.0.0
      - VITE_ENABLE_MOCK_DATA=false
      - VITE_ENABLE_DEBUG=false
    ports:
      - "8000:8000"
    volumes:
      - ./config:/app/config:rw
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
      - /etc/localtime:/etc/localtime:ro
    networks:
      - frigate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      - nginx

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: frigate-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    networks:
      - frigate-network
    depends_on:
      - frigate-config-ui

  # Redis 缓存和会话存储
  redis:
    image: redis:7-alpine
    container_name: frigate-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-frigate123}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    networks:
      - frigate-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # 可选：PostgreSQL 数据库（如果需要持久化数据）
  postgres:
    image: postgres:15-alpine
    container_name: frigate-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=frigate_config
      - POSTGRES_USER=frigate
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-frigate123}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - frigate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U frigate -d frigate_config"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - database

  # 可选：监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: frigate-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - frigate-network
    profiles:
      - monitoring

  # 可选：监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: frigate-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - frigate-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# 网络配置
networks:
  frigate-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local